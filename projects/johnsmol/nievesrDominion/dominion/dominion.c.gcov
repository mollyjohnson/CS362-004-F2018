        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:22
        -:    0:Programs:22
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 13530 returned 100% blocks executed 83%
    13530:    8:int compare(const void* a, const void* b) {
    13530:    9:  if (*(int*)a > *(int*)b)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
    #####:   10:    return 1;
    13530:   11:  if (*(int*)a < *(int*)b)
branch  0 taken 27% (fallthrough)
branch  1 taken 73%
     3608:   12:    return -1;
     9922:   13:  return 0;
        -:   14:}
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
    #####:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
    #####:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
function initializeGame called 316 returned 100% blocks executed 95%
      316:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed,
        -:   38:		   struct gameState *state) {
        -:   39:
        -:   40:  int i;
        -:   41:  int j;
        -:   42:  int it;			
        -:   43:  //set up random number generator
      316:   44:  SelectStream(1);
call    0 returned 100%
      316:   45:  PutSeed((long)randomSeed);
call    0 returned 100%
        -:   46:  
        -:   47:  //check number of players
      316:   48:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   49:    {
    #####:   50:      return -1;
        -:   51:    }
        -:   52:
        -:   53:  //set number of players
      316:   54:  state->numPlayers = numPlayers;
        -:   55:
        -:   56:  //check selected kingdom cards are different
     3476:   57:  for (i = 0; i < 10; i++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   58:    {
    34760:   59:      for (j = 0; j < 10; j++)
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
        -:   60:        {
    31600:   61:	  if (j != i && kingdomCards[j] == kingdomCards[i])
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
        -:   62:	    {
    #####:   63:	      return -1;
        -:   64:	    }
        -:   65:        }
        -:   66:    }
        -:   67:
        -:   68:
        -:   69:  //initialize supply
        -:   70:  ///////////////////////////////
        -:   71:
        -:   72:  //set number of Curse cards
      316:   73:  if (numPlayers == 2)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:   74:    {
      128:   75:      state->supplyCount[curse] = 10;
        -:   76:    }
      188:   77:  else if (numPlayers == 3)
branch  0 taken 56% (fallthrough)
branch  1 taken 44%
        -:   78:    {
      106:   79:      state->supplyCount[curse] = 20;
        -:   80:    }
        -:   81:  else
        -:   82:    {
       82:   83:      state->supplyCount[curse] = 30;
        -:   84:    }
        -:   85:
        -:   86:  //set number of Victory cards
      316:   87:  if (numPlayers == 2)
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
        -:   88:    {
      128:   89:      state->supplyCount[estate] = 8;
      128:   90:      state->supplyCount[duchy] = 8;
      128:   91:      state->supplyCount[province] = 8;
        -:   92:    }
        -:   93:  else
        -:   94:    {
      188:   95:      state->supplyCount[estate] = 12;
      188:   96:      state->supplyCount[duchy] = 12;
      188:   97:      state->supplyCount[province] = 12;
        -:   98:    }
        -:   99:
        -:  100:  //set number of Treasure cards
      316:  101:  state->supplyCount[copper] = 60 - (7 * numPlayers);
      316:  102:  state->supplyCount[silver] = 40;
      316:  103:  state->supplyCount[gold] = 30;
        -:  104:
        -:  105:  //set number of Kingdom cards
     6636:  106:  for (i = adventurer; i <= treasure_map; i++)       	//loop all cards
branch  0 taken 95%
branch  1 taken 5% (fallthrough)
        -:  107:    {
    52140:  108:      for (j = 0; j < 10; j++)           		//loop chosen cards
branch  0 taken 94%
branch  1 taken 6% (fallthrough)
        -:  109:	{
    48980:  110:	  if (kingdomCards[j] == i)
branch  0 taken 6% (fallthrough)
branch  1 taken 94%
        -:  111:	    {
        -:  112:	      //check if card is a 'Victory' Kingdom card
     3160:  113:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens)
branch  0 taken 90% (fallthrough)
branch  1 taken 10%
branch  2 taken 11% (fallthrough)
branch  3 taken 89%
        -:  114:		{
     1264:  115:		  if (numPlayers == 2){ 
branch  0 taken 41% (fallthrough)
branch  1 taken 59%
      256:  116:		    state->supplyCount[i] = 8; 
        -:  117:		  }
      376:  118:		  else{ state->supplyCount[i] = 12; }
        -:  119:		}
        -:  120:	      else
        -:  121:		{
     2528:  122:		  state->supplyCount[i] = 10;
        -:  123:		}
     3160:  124:	      break;
        -:  125:	    }
        -:  126:	  else    //card is not in the set choosen for the game
        -:  127:	    {
    45820:  128:	      state->supplyCount[i] = -1;
        -:  129:	    }
        -:  130:	}
        -:  131:
        -:  132:    }
        -:  133:
        -:  134:  ////////////////////////
        -:  135:  //supply intilization complete
        -:  136:
        -:  137:  //set player decks
     1218:  138:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  139:    {
      902:  140:      state->deckCount[i] = 0;
     3608:  141:      for (j = 0; j < 3; j++)
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
        -:  142:	{
     2706:  143:	  state->deck[i][j] = estate;
     2706:  144:	  state->deckCount[i]++;
        -:  145:	}
     7216:  146:      for (j = 3; j < 10; j++)
branch  0 taken 88%
branch  1 taken 13% (fallthrough)
        -:  147:	{
     6314:  148:	  state->deck[i][j] = copper;
     6314:  149:	  state->deckCount[i]++;		
        -:  150:	}
        -:  151:    }
        -:  152:
        -:  153:  //shuffle player decks
     1218:  154:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  155:    {
      902:  156:      if ( shuffle(i, state) < 0 )
call    0 returned 100%
branch  1 taken 0% (fallthrough)
branch  2 taken 100%
        -:  157:	{
    #####:  158:	  return -1;
        -:  159:	}
        -:  160:    }
        -:  161:
        -:  162:  //draw player hands
     1218:  163:  for (i = 0; i < numPlayers; i++)
branch  0 taken 74%
branch  1 taken 26% (fallthrough)
        -:  164:    {  
        -:  165:      //initialize hand size to zero
      902:  166:      state->handCount[i] = 0;
      902:  167:      state->discardCount[i] = 0;
        -:  168:      //draw 5 cards
        -:  169:      // for (j = 0; j < 5; j++)
        -:  170:      //	{
        -:  171:      //	  drawCard(i, state);
        -:  172:      //	}
        -:  173:    }
        -:  174:  
        -:  175:  //set embargo tokens to 0 for all supply piles
     8848:  176:  for (i = 0; i <= treasure_map; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  177:    {
     8532:  178:      state->embargoTokens[i] = 0;
        -:  179:    }
        -:  180:
        -:  181:  //initialize first player's turn
      316:  182:  state->outpostPlayed = 0;
      316:  183:  state->phase = 0;
      316:  184:  state->numActions = 1;
      316:  185:  state->numBuys = 1;
      316:  186:  state->playedCardCount = 0;
      316:  187:  state->whoseTurn = 0;
      316:  188:  state->handCount[state->whoseTurn] = 0;
        -:  189:  //int it; move to top
        -:  190:
        -:  191:  //Moved draw cards to here, only drawing at the start of a turn
     1896:  192:  for (it = 0; it < 5; it++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
     1580:  193:    drawCard(state->whoseTurn, state);
call    0 returned 100%
        -:  194:  }
        -:  195:
      316:  196:  updateCoins(state->whoseTurn, state, 0);
call    0 returned 100%
        -:  197:
      316:  198:  return 0;
        -:  199:}
        -:  200:
function shuffle called 2740078 returned 100% blocks executed 100%
  2740078:  201:int shuffle(int player, struct gameState *state) {
        -:  202: 
        -:  203:
        -:  204:  int newDeck[MAX_DECK];
  2740078:  205:  int newDeckPos = 0;
        -:  206:  int card;
        -:  207:  int i;
        -:  208:
  2740078:  209:  if (state->deckCount[player] < 1)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
  2739176:  210:    return -1;
      902:  211:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare); 
call    0 returned 100%
        -:  212:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  213:
    10824:  214:  while (state->deckCount[player] > 0) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     9020:  215:    card = floor(Random() * state->deckCount[player]);
call    0 returned 100%
     9020:  216:    newDeck[newDeckPos] = state->deck[player][card];
     9020:  217:    newDeckPos++;
    30566:  218:    for (i = card; i < state->deckCount[player]-1; i++) {
branch  0 taken 70%
branch  1 taken 30% (fallthrough)
    21546:  219:      state->deck[player][i] = state->deck[player][i+1];
        -:  220:    }
     9020:  221:    state->deckCount[player]--;
        -:  222:  }
     9922:  223:  for (i = 0; i < newDeckPos; i++) {
branch  0 taken 91%
branch  1 taken 9% (fallthrough)
     9020:  224:    state->deck[player][i] = newDeck[i];
     9020:  225:    state->deckCount[player]++;
        -:  226:  }
        -:  227:
      902:  228:  return 0;
        -:  229:}
        -:  230:
function playCard called 0 returned 0% blocks executed 0%
    #####:  231:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) 
        -:  232:{	
        -:  233:  int card;
    #####:  234:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  235:
        -:  236:  //check if it is the right phase
    #####:  237:  if (state->phase != 0)
branch  0 never executed
branch  1 never executed
        -:  238:    {
    #####:  239:      return -1;
        -:  240:    }
        -:  241:	
        -:  242:  //check if player has enough actions
    #####:  243:  if ( state->numActions < 1 )
branch  0 never executed
branch  1 never executed
        -:  244:    {
    #####:  245:      return -1;
        -:  246:    }
        -:  247:	
        -:  248:  //get card played
    #####:  249:  card = handCard(handPos, state);
call    0 never executed
        -:  250:	
        -:  251:  //check if selected card is an action
    #####:  252:  if ( card < adventurer || card > treasure_map )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  253:    {
    #####:  254:      return -1;
        -:  255:    }
        -:  256:	
        -:  257:  //play card
    #####:  258:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  259:    {
    #####:  260:      return -1;
        -:  261:    }
        -:  262:	
        -:  263:  //reduce number of actions
    #####:  264:  state->numActions--;
        -:  265:
        -:  266:  //update coins (Treasure cards may be added with card draws)
    #####:  267:  updateCoins(state->whoseTurn, state, coin_bonus);
call    0 never executed
        -:  268:	
    #####:  269:  return 0;
        -:  270:}
        -:  271:
function buyCard called 0 returned 0% blocks executed 0%
    #####:  272:int buyCard(int supplyPos, struct gameState *state) {
        -:  273:  int who;
        -:  274:  if (DEBUG){
        -:  275:    printf("Entering buyCard...\n");
        -:  276:  }
        -:  277:
        -:  278:  // I don't know what to do about the phase thing.
        -:  279:
    #####:  280:  who = state->whoseTurn;
        -:  281:
    #####:  282:  if (state->numBuys < 1){
branch  0 never executed
branch  1 never executed
        -:  283:    if (DEBUG)
        -:  284:      printf("You do not have any buys left\n");
    #####:  285:    return -1;
    #####:  286:  } else if (supplyCount(supplyPos, state) <1){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  287:    if (DEBUG)
        -:  288:      printf("There are not any of that type of card left\n");
    #####:  289:    return -1;
    #####:  290:  } else if (state->coins < getCost(supplyPos)){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  291:    if (DEBUG) 
        -:  292:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  293:    return -1;
        -:  294:  } else {
    #####:  295:    state->phase=1;
        -:  296:    //state->supplyCount[supplyPos]--;
    #####:  297:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
call    0 never executed
        -:  298:  
    #####:  299:    state->coins = (state->coins) - (getCost(supplyPos));
call    0 never executed
    #####:  300:    state->numBuys--;
        -:  301:    if (DEBUG)
        -:  302:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  303:  }
        -:  304:
        -:  305:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  306:  //state->discardCount[who]++;
        -:  307:    
    #####:  308:  return 0;
        -:  309:}
        -:  310:
function numHandCards called 0 returned 0% blocks executed 0%
    #####:  311:int numHandCards(struct gameState *state) {
    #####:  312:  return state->handCount[ whoseTurn(state) ];
call    0 never executed
        -:  313:}
        -:  314:
function handCard called 2 returned 100% blocks executed 100%
        2:  315:int handCard(int handPos, struct gameState *state) {
        2:  316:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
        2:  317:  return state->hand[currentPlayer][handPos];
        -:  318:}
        -:  319:
function supplyCount called 54 returned 100% blocks executed 100%
       54:  320:int supplyCount(int card, struct gameState *state) {
       54:  321:  return state->supplyCount[card];
        -:  322:}
        -:  323:
function fullDeckCount called 0 returned 0% blocks executed 0%
    #####:  324:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  325:  int i;
    #####:  326:  int count = 0;
        -:  327:
    #####:  328:  for (i = 0; i < state->deckCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  329:    {
    #####:  330:      if (state->deck[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  331:    }
        -:  332:
    #####:  333:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  334:    {
    #####:  335:      if (state->hand[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  336:    }
        -:  337:
    #####:  338:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  339:    {
    #####:  340:      if (state->discard[player][i] == card) count++;
branch  0 never executed
branch  1 never executed
        -:  341:    }
        -:  342:
    #####:  343:  return count;
        -:  344:}
        -:  345:
function whoseTurn called 29998 returned 100% blocks executed 100%
    29998:  346:int whoseTurn(struct gameState *state) {
    29998:  347:  return state->whoseTurn;
        -:  348:}
        -:  349:
function endTurn called 0 returned 0% blocks executed 0%
    #####:  350:int endTurn(struct gameState *state) {
        -:  351:  int k;
        -:  352:  int i;
    #####:  353:  int currentPlayer = whoseTurn(state);
call    0 never executed
        -:  354:  
        -:  355:  //Discard hand
    #####:  356:  for (i = 0; i < state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  357:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  358:    state->hand[currentPlayer][i] = -1;//Set card to -1
        -:  359:  }
    #####:  360:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  361:    
        -:  362:  //Code for determining the player
    #####:  363:  if (currentPlayer < (state->numPlayers - 1)){ 
branch  0 never executed
branch  1 never executed
    #####:  364:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
        -:  365:  }
        -:  366:  else{
    #####:  367:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  368:  }
        -:  369:
    #####:  370:  state->outpostPlayed = 0;
    #####:  371:  state->phase = 0;
    #####:  372:  state->numActions = 1;
    #####:  373:  state->coins = 0;
    #####:  374:  state->numBuys = 1;
    #####:  375:  state->playedCardCount = 0;
    #####:  376:  state->handCount[state->whoseTurn] = 0;
        -:  377:
        -:  378:  //int k; move to top
        -:  379:  //Next player draws hand
    #####:  380:  for (k = 0; k < 5; k++){
branch  0 never executed
branch  1 never executed
    #####:  381:    drawCard(state->whoseTurn, state);//Draw a card
call    0 never executed
        -:  382:  }
        -:  383:
        -:  384:  //Update money
    #####:  385:  updateCoins(state->whoseTurn, state , 0);
call    0 never executed
        -:  386:
    #####:  387:  return 0;
        -:  388:}
        -:  389:
function isGameOver called 6 returned 100% blocks executed 100%
        6:  390:int isGameOver(struct gameState *state) {
        -:  391:  int i;
        -:  392:  int j;
        -:  393:	
        -:  394:  //if stack of Province cards is empty, the game ends
        6:  395:  if (state->supplyCount[province] == 0)
branch  0 taken 33% (fallthrough)
branch  1 taken 67%
        -:  396:    {
        2:  397:      return 1;
        -:  398:    }
        -:  399:
        -:  400:  //if three supply pile are at 0, the game ends
        4:  401:  j = 0;
      104:  402:  for (i = 0; i < 25; i++)
branch  0 taken 96%
branch  1 taken 4% (fallthrough)
        -:  403:    {
      100:  404:      if (state->supplyCount[i] == 0)
branch  0 taken 52% (fallthrough)
branch  1 taken 48%
        -:  405:	{
       52:  406:	  j++;
        -:  407:	}
        -:  408:    }
        4:  409:  if ( j >= 3)
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
        -:  410:    {
        2:  411:      return 1;
        -:  412:    }
        -:  413:
        2:  414:  return 0;
        -:  415:}
        -:  416:
function scoreFor called 0 returned 0% blocks executed 0%
    #####:  417:int scoreFor (int player, struct gameState *state) {
        -:  418:
        -:  419:  int i;
    #####:  420:  int score = 0;
        -:  421:  //score from hand
    #####:  422:  for (i = 0; i < state->handCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  423:    {
    #####:  424:      if (state->hand[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  425:      if (state->hand[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  426:      if (state->hand[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  427:      if (state->hand[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  428:      if (state->hand[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  429:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  430:    }
        -:  431:
        -:  432:  //score from discard
    #####:  433:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  434:    {
    #####:  435:      if (state->discard[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  436:      if (state->discard[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  437:      if (state->discard[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  438:      if (state->discard[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  439:      if (state->discard[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  440:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  441:    }
        -:  442:
        -:  443:  //score from deck
    #####:  444:  for (i = 0; i < state->discardCount[player]; i++)
branch  0 never executed
branch  1 never executed
        -:  445:    {
    #####:  446:      if (state->deck[player][i] == curse) { score = score - 1; };
branch  0 never executed
branch  1 never executed
    #####:  447:      if (state->deck[player][i] == estate) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  448:      if (state->deck[player][i] == duchy) { score = score + 3; };
branch  0 never executed
branch  1 never executed
    #####:  449:      if (state->deck[player][i] == province) { score = score + 6; };
branch  0 never executed
branch  1 never executed
    #####:  450:      if (state->deck[player][i] == great_hall) { score = score + 1; };
branch  0 never executed
branch  1 never executed
    #####:  451:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
branch  0 never executed
branch  1 never executed
call    2 never executed
        -:  452:    }
        -:  453:
    #####:  454:  return score;
        -:  455:}
        -:  456:
function getWinners called 0 returned 0% blocks executed 0%
    #####:  457:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  458:  int i;	
        -:  459:  int j;
        -:  460:  int highScore;
        -:  461:  int currentPlayer;
        -:  462:
        -:  463:  //get score for each player
    #####:  464:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  465:    {
        -:  466:      //set unused player scores to -9999
    #####:  467:      if (i >= state->numPlayers)
branch  0 never executed
branch  1 never executed
        -:  468:	{
    #####:  469:	  players[i] = -9999;
        -:  470:	}
        -:  471:      else
        -:  472:	{
    #####:  473:	  players[i] = scoreFor (i, state);
call    0 never executed
        -:  474:	}
        -:  475:    }
        -:  476:
        -:  477:  //find highest score
    #####:  478:  j = 0;
    #####:  479:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  480:    {
    #####:  481:      if (players[i] > players[j])
branch  0 never executed
branch  1 never executed
        -:  482:	{
    #####:  483:	  j = i;
        -:  484:	}
        -:  485:    }
    #####:  486:  highScore = players[j];
        -:  487:
        -:  488:  //add 1 to players who had less turns
    #####:  489:  currentPlayer = whoseTurn(state);
call    0 never executed
    #####:  490:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  491:    {
    #####:  492:      if ( players[i] == highScore && i > currentPlayer )
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  493:	{
    #####:  494:	  players[i]++;
        -:  495:	}
        -:  496:    }
        -:  497:
        -:  498:  //find new highest score
    #####:  499:  j = 0;
    #####:  500:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  501:    {
    #####:  502:      if ( players[i] > players[j] )
branch  0 never executed
branch  1 never executed
        -:  503:	{
    #####:  504:	  j = i;
        -:  505:	}
        -:  506:    }
    #####:  507:  highScore = players[j];
        -:  508:
        -:  509:  //set winners in array to 1 and rest to 0
    #####:  510:  for (i = 0; i < MAX_PLAYERS; i++)
branch  0 never executed
branch  1 never executed
        -:  511:    {
    #####:  512:      if ( players[i] == highScore )
branch  0 never executed
branch  1 never executed
        -:  513:	{
    #####:  514:	  players[i] = 1;
        -:  515:	}
        -:  516:      else
        -:  517:	{
    #####:  518:	  players[i] = 0;
        -:  519:	}
        -:  520:    }
        -:  521:
    #####:  522:  return 0;
        -:  523:}
        -:  524:
function drawCard called 1888064 returned 100% blocks executed 85%
  1888064:  525:int drawCard(int player, struct gameState *state)
        -:  526:{	int count;
        -:  527:  int deckCounter;
  1888064:  528:  if (state->deckCount[player] <= 0){//Deck is empty
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
        -:  529:    
        -:  530:    //Step 1 Shuffle the discard pile back into a deck
        -:  531:    int i;
        -:  532:    //Move discard to deck
  1375130:  533:    for (i = 0; i < state->discardCount[player];i++){
branch  0 taken 0%
branch  1 taken 100% (fallthrough)
    #####:  534:      state->deck[player][i] = state->discard[player][i];
    #####:  535:      state->discard[player][i] = -1;
        -:  536:    }
        -:  537:
  1375130:  538:    state->deckCount[player] = state->discardCount[player];
  1375130:  539:    state->discardCount[player] = 0;//Reset discard
        -:  540:
        -:  541:    //Shufffle the deck
  1375130:  542:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
call    0 returned 100%
        -:  543:   
        -:  544:    if (DEBUG){//Debug statements
        -:  545:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  546:    }
        -:  547:    
  1375130:  548:    state->discardCount[player] = 0;
        -:  549:
        -:  550:    //Step 2 Draw Card
  1375130:  551:    count = state->handCount[player];//Get current player's hand count
        -:  552:    
        -:  553:    if (DEBUG){//Debug statements
        -:  554:      printf("Current hand count: %d\n", count);
        -:  555:    }
        -:  556:    
  1375130:  557:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  558:
  1375130:  559:    if (deckCounter == 0)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
  1375130:  560:      return -1;
        -:  561:
    #####:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
    #####:  563:    state->deckCount[player]--;
    #####:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
        -:  567:  else{
   512934:  568:    int count = state->handCount[player];//Get current hand count for player
        -:  569:    int deckCounter;
        -:  570:    if (DEBUG){//Debug statements
        -:  571:      printf("Current hand count: %d\n", count);
        -:  572:    }
        -:  573:
   512934:  574:    deckCounter = state->deckCount[player];//Create holder for the deck count
   512934:  575:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
   512934:  576:    state->deckCount[player]--;
   512934:  577:    state->handCount[player]++;//Increment hand count
        -:  578:  }
        -:  579:
   512934:  580:  return 0;
        -:  581:}
        -:  582:
function getCost called 56 returned 100% blocks executed 100%
       56:  583:int getCost(int cardNumber)
        -:  584:{
       56:  585:  switch( cardNumber ) 
branch  0 taken 4%
branch  1 taken 4%
branch  2 taken 4%
branch  3 taken 4%
branch  4 taken 4%
branch  5 taken 4%
branch  6 taken 4%
branch  7 taken 4%
branch  8 taken 4%
branch  9 taken 4%
branch 10 taken 4%
branch 11 taken 4%
branch 12 taken 4%
branch 13 taken 4%
branch 14 taken 4%
branch 15 taken 4%
branch 16 taken 4%
branch 17 taken 4%
branch 18 taken 4%
branch 19 taken 4%
branch 20 taken 4%
branch 21 taken 4%
branch 22 taken 4%
branch 23 taken 4%
branch 24 taken 4%
branch 25 taken 4%
branch 26 taken 4%
branch 27 taken 4%
        -:  586:    {
        -:  587:    case curse:
        2:  588:      return 0;
        -:  589:    case estate:
        2:  590:      return 2;
        -:  591:    case duchy:
        2:  592:      return 5;
        -:  593:    case province:
        2:  594:      return 8;
        -:  595:    case copper:
        2:  596:      return 0;
        -:  597:    case silver:
        2:  598:      return 3;
        -:  599:    case gold:
        2:  600:      return 6;
        -:  601:    case adventurer:
        2:  602:      return 6;
        -:  603:    case council_room:
        2:  604:      return 5;
        -:  605:    case feast:
        2:  606:      return 4;
        -:  607:    case gardens:
        2:  608:      return 4;
        -:  609:    case mine:
        2:  610:      return 5;
        -:  611:    case remodel:
        2:  612:      return 4;
        -:  613:    case smithy:
        2:  614:      return 4;
        -:  615:    case village:
        2:  616:      return 3;
        -:  617:    case baron:
        2:  618:      return 4;
        -:  619:    case great_hall:
        2:  620:      return 3;
        -:  621:    case minion:
        2:  622:      return 5;
        -:  623:    case steward:
        2:  624:      return 3;
        -:  625:    case tribute:
        2:  626:      return 5;
        -:  627:    case ambassador:
        2:  628:      return 3;
        -:  629:    case cutpurse:
        2:  630:      return 4;
        -:  631:    case embargo: 
        2:  632:      return 2;
        -:  633:    case outpost:
        2:  634:      return 5;
        -:  635:    case salvager:
        2:  636:      return 4;
        -:  637:    case sea_hag:
        2:  638:      return 4;
        -:  639:    case treasure_map:
        2:  640:      return 4;
        -:  641:    }
        -:  642:	
        2:  643:  return -1;
        -:  644:}
        -:  645:
function cardEffect called 14998 returned 100% blocks executed 4%
    14998:  646:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus)
        -:  647:{
        -:  648:  int i;
        -:  649:  int j;
        -:  650:  int k;
        -:  651:  int x;
        -:  652:  int index;
    14998:  653:  int currentPlayer = whoseTurn(state);
call    0 returned 100%
    14998:  654:  int nextPlayer = currentPlayer + 1;
        -:  655:
    14998:  656:  int tributeRevealedCards[2] = {-1, -1};
        -:  657:  int temphand[MAX_HAND];// moved above the if statement
        -:  658:  //int drawntreasure=0;
        -:  659:  //int cardDrawn;
        -:  660:  //int z = 0;// this is the counter for the temp hand
    14998:  661:  if (nextPlayer > (state->numPlayers - 1)){
branch  0 taken 34% (fallthrough)
branch  1 taken 66%
     5100:  662:    nextPlayer = 0;
        -:  663:  }
        -:  664:  
        -:  665:	
        -:  666:  //uses switch to select card and perform actions
    14998:  667:  switch( card ) 
branch  0 taken 33%
branch  1 taken 33%
branch  2 taken 0%
branch  3 taken 33%
branch  4 taken 1%
branch  5 taken 0%
branch  6 taken 0%
branch  7 taken 0%
branch  8 taken 0%
branch  9 taken 0%
branch 10 taken 0%
branch 11 taken 0%
branch 12 taken 0%
branch 13 taken 0%
branch 14 taken 0%
branch 15 taken 0%
branch 16 taken 0%
branch 17 taken 0%
branch 18 taken 0%
branch 19 taken 0%
branch 20 taken 0%
        -:  668:    {
        -:  669:    case smithy:
     5015:  670:	return playSmithy(state, handPos);
call    0 returned 100%
        -:  671:    case village:
     4947:  672:	return playVillage(state, handPos);
call    0 returned 100%
        -:  673:    case great_hall:
    #####:  674:	return playgreat_hall(state, handPos);
call    0 never executed
        -:  675:   case adventurer:
     4998:  676:	return playAdventurer(state);
call    0 returned 100%
        -:  677:   case council_room:
       38:  678:	return playcouncil_room(state,handPos);
call    0 returned 100%
        -:  679:    /*case adventurer:
        -:  680:      while(drawntreasure<2){
        -:  681:	if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
        -:  682:	  drawCard(currentPlayer, state);
        -:  683:	}
        -:  684:	drawCard(currentPlayer, state);
        -:  685:	cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
        -:  686:	if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
        -:  687:	  drawntreasure++;
        -:  688:	else{
        -:  689:	  temphand[z]=cardDrawn;
        -:  690:	  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
        -:  691:	  z++;
        -:  692:	}
        -:  693:      }
        -:  694:      while(z-1>=0){
        -:  695:	state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
        -:  696:	z=z-1;
        -:  697:      }
        -:  698:      return 0;
        -:  699:				
        -:  700:    case council_room:
        -:  701:      //+4 Cards
        -:  702:      for (i = 0; i < 4; i++)
        -:  703:	{
        -:  704:	  drawCard(currentPlayer, state);
        -:  705:	}
        -:  706:			
        -:  707:      //+1 Buy
        -:  708:      state->numBuys++;
        -:  709:			
        -:  710:      //Each other player draws a card
        -:  711:      for (i = 0; i < state->numPlayers; i++)
        -:  712:	{
        -:  713:	  if ( i != currentPlayer )
        -:  714:	    {
        -:  715:	      drawCard(i, state);
        -:  716:	    }
        -:  717:	}
        -:  718:			
        -:  719:      //put played card in played card pile
        -:  720:      discardCard(handPos, currentPlayer, state, 0);
        -:  721:			
        -:  722:      return 0;
        -:  723:	*/		
        -:  724:    case feast:
        -:  725:      //gain card with cost up to 5
        -:  726:      //Backup hand
        -:  727:
    #####:  728:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  729:	temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  730:	state->hand[currentPlayer][i] = -1;//Set to nothing
        -:  731:      }
        -:  732:      //Backup hand
        -:  733:
        -:  734:      //Update Coins for Buy
    #####:  735:      updateCoins(currentPlayer, state, 5);
call    0 never executed
    #####:  736:      x = 1;//Condition to loop on
    #####:  737:      while( x == 1) {//Buy one card
branch  0 never executed
branch  1 never executed
    #####:  738:	if (supplyCount(choice1, state) <= 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  739:	  if (DEBUG)
        -:  740:	    printf("None of that card left, sorry!\n");
        -:  741:
        -:  742:	  if (DEBUG){
        -:  743:	    printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  744:	  }
        -:  745:	}
    #####:  746:	else if (state->coins < getCost(choice1)){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  747:	  printf("That card is too expensive!\n");
call    0 never executed
        -:  748:
        -:  749:	  if (DEBUG){
        -:  750:	    printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  751:	  }
        -:  752:	}
        -:  753:	else{
        -:  754:
        -:  755:	  if (DEBUG){
        -:  756:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  757:	  }
        -:  758:
    #####:  759:	  gainCard(choice1, state, 0, currentPlayer);//Gain the card
call    0 never executed
    #####:  760:	  x = 0;//No more buying cards
        -:  761:
        -:  762:	  if (DEBUG){
        -:  763:	    printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  764:	  }
        -:  765:
        -:  766:	}
        -:  767:      }     
        -:  768:
        -:  769:      //Reset Hand
    #####:  770:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####:  771:	state->hand[currentPlayer][i] = temphand[i];
    #####:  772:	temphand[i] = -1;
        -:  773:      }
        -:  774:      //Reset Hand
        -:  775:      			
    #####:  776:      return 0;
        -:  777:			
        -:  778:    case gardens:
    #####:  779:      return -1;
        -:  780:			
        -:  781:    case mine:
    #####:  782:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  783:
    #####:  784:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  785:	{
    #####:  786:	  return -1;
        -:  787:	}
        -:  788:		
    #####:  789:      if (choice2 > treasure_map || choice2 < curse)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -:  790:	{
    #####:  791:	  return -1;
        -:  792:	}
        -:  793:
    #####:  794:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  795:	{
    #####:  796:	  return -1;
        -:  797:	}
        -:  798:
    #####:  799:      gainCard(choice2, state, 2, currentPlayer);
call    0 never executed
        -:  800:
        -:  801:      //discard card from hand
    #####:  802:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  803:
        -:  804:      //discard trashed card
    #####:  805:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  806:	{
    #####:  807:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  808:	    {
    #####:  809:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  810:	      break;
        -:  811:	    }
        -:  812:	}
        -:  813:			
    #####:  814:      return 0;
        -:  815:			
        -:  816:    case remodel:
    #####:  817:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  818:
    #####:  819:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) )
call    0 never executed
call    1 never executed
branch  2 never executed
branch  3 never executed
        -:  820:	{
    #####:  821:	  return -1;
        -:  822:	}
        -:  823:
    #####:  824:      gainCard(choice2, state, 0, currentPlayer);
call    0 never executed
        -:  825:
        -:  826:      //discard card from hand
    #####:  827:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  828:
        -:  829:      //discard trashed card
    #####:  830:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -:  831:	{
    #####:  832:	  if (state->hand[currentPlayer][i] == j)
branch  0 never executed
branch  1 never executed
        -:  833:	    {
    #####:  834:	      discardCard(i, currentPlayer, state, 0);			
call    0 never executed
    #####:  835:	      break;
        -:  836:	    }
        -:  837:	}
        -:  838:
        -:  839:
    #####:  840:      return 0;
        -:  841:		
        -:  842:    /*case smithy:
        -:  843:      //+3 Cards
        -:  844:      for (i = 0; i < 3; i++)
        -:  845:	{
        -:  846:	  drawCard(currentPlayer, state);
        -:  847:	}
        -:  848:			
        -:  849:      //discard card from hand
        -:  850:      discardCard(handPos, currentPlayer, state, 0);
        -:  851:      return 0;
        -:  852:		
        -:  853:    case village:
        -:  854:      //+1 Card
        -:  855:      drawCard(currentPlayer, state);
        -:  856:			
        -:  857:      //+2 Actions
        -:  858:      state->numActions = state->numActions + 2;
        -:  859:			
        -:  860:      //discard played card from hand
        -:  861:      discardCard(handPos, currentPlayer, state, 0);
        -:  862:      return 0;*/
        -:  863:		
        -:  864:    case baron:
    #####:  865:      state->numBuys++;//Increase buys by 1!
    #####:  866:      if (choice1 > 0){//Boolean true or going to discard an estate
branch  0 never executed
branch  1 never executed
    #####:  867:	int p = 0;//Iterator for hand!
    #####:  868:	int card_not_discarded = 1;//Flag for discard set!
    #####:  869:	while(card_not_discarded){
branch  0 never executed
branch  1 never executed
    #####:  870:	  if (state->hand[currentPlayer][p] == estate){//Found an estate card!
branch  0 never executed
branch  1 never executed
    #####:  871:	    state->coins += 4;//Add 4 coins to the amount of coins
    #####:  872:	    state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  873:	    state->discardCount[currentPlayer]++;
    #####:  874:	    for (;p < state->handCount[currentPlayer]; p++){
branch  0 never executed
branch  1 never executed
    #####:  875:	      state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
        -:  876:	    }
    #####:  877:	    state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  878:	    state->handCount[currentPlayer]--;
    #####:  879:	    card_not_discarded = 0;//Exit the loop
        -:  880:	  }
    #####:  881:	  else if (p > state->handCount[currentPlayer]){
branch  0 never executed
branch  1 never executed
        -:  882:	    if(DEBUG) {
        -:  883:	      printf("No estate cards in your hand, invalid choice\n");
        -:  884:	      printf("Must gain an estate if there are any\n");
        -:  885:	    }
    #####:  886:	    if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  887:	      gainCard(estate, state, 0, currentPlayer);
call    0 never executed
    #####:  888:	      state->supplyCount[estate]--;//Decrement estates
    #####:  889:	      if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  890:		isGameOver(state);
call    0 never executed
        -:  891:	      }
        -:  892:	    }
    #####:  893:	    card_not_discarded = 0;//Exit the loop
        -:  894:	  }
        -:  895:			    
        -:  896:	  else{
    #####:  897:	    p++;//Next card
        -:  898:	  }
        -:  899:	}
        -:  900:      }
        -:  901:			    
        -:  902:      else{
    #####:  903:	if (supplyCount(estate, state) > 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  904:	  gainCard(estate, state, 0, currentPlayer);//Gain an estate
call    0 never executed
    #####:  905:	  state->supplyCount[estate]--;//Decrement Estates
    #####:  906:	  if (supplyCount(estate, state) == 0){
call    0 never executed
branch  1 never executed
branch  2 never executed
    #####:  907:	    isGameOver(state);
call    0 never executed
        -:  908:	  }
        -:  909:	}
        -:  910:      }
        -:  911:	    
        -:  912:      
    #####:  913:      return 0;
        -:  914:		
        -:  915:    /*case great_hall:
        -:  916:      +1 Card
        -:  917:      drawCard(currentPlayer, state);
        -:  918:			
        -:  919:      //+1 Actions
        -:  920:      state->numActions++;
        -:  921:			
        -:  922:      //discard card from hand
        -:  923:      discardCard(handPos, currentPlayer, state, 0);
        -:  924:      return 0;*/
        -:  925:		
        -:  926:    case minion:
        -:  927:      //+1 action
    #####:  928:      state->numActions++;
        -:  929:			
        -:  930:      //discard card from hand
    #####:  931:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  932:			
    #####:  933:      if (choice1)		//+2 coins
branch  0 never executed
branch  1 never executed
        -:  934:	{
    #####:  935:	  state->coins = state->coins + 2;
        -:  936:	}
        -:  937:			
    #####:  938:      else if (choice2)		//discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
branch  0 never executed
branch  1 never executed
        -:  939:	{
        -:  940:	  //discard hand
    #####:  941:	  while(numHandCards(state) > 0)
call    0 never executed
branch  1 never executed
branch  2 never executed
        -:  942:	    {
    #####:  943:	      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
        -:  944:	    }
        -:  945:				
        -:  946:	  //draw 4
    #####:  947:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -:  948:	    {
    #####:  949:	      drawCard(currentPlayer, state);
call    0 never executed
        -:  950:	    }
        -:  951:				
        -:  952:	  //other players discard hand and redraw if hand size > 4
    #####:  953:	  for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -:  954:	    {
    #####:  955:	      if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -:  956:		{
    #####:  957:		  if ( state->handCount[i] > 4 )
branch  0 never executed
branch  1 never executed
        -:  958:		    {
        -:  959:		      //discard hand
    #####:  960:		      while( state->handCount[i] > 0 )
branch  0 never executed
branch  1 never executed
        -:  961:			{
    #####:  962:			  discardCard(handPos, i, state, 0);
call    0 never executed
        -:  963:			}
        -:  964:							
        -:  965:		      //draw 4
    #####:  966:		      for (j = 0; j < 4; j++)
branch  0 never executed
branch  1 never executed
        -:  967:			{
    #####:  968:			  drawCard(i, state);
call    0 never executed
        -:  969:			}
        -:  970:		    }
        -:  971:		}
        -:  972:	    }
        -:  973:				
        -:  974:	}
    #####:  975:      return 0;
        -:  976:		
        -:  977:    case steward:
    #####:  978:      if (choice1 == 1)
branch  0 never executed
branch  1 never executed
        -:  979:	{
        -:  980:	  //+2 cards
    #####:  981:	  drawCard(currentPlayer, state);
call    0 never executed
    #####:  982:	  drawCard(currentPlayer, state);
call    0 never executed
        -:  983:	  
        -:  984:	}
    #####:  985:      else if (choice1 == 2)
branch  0 never executed
branch  1 never executed
        -:  986:	{
        -:  987:	  //+2 coins
    #####:  988:	  state->coins = state->coins + 2;
        -:  989:	}
        -:  990:      else
        -:  991:	{
        -:  992:	  //trash 2 cards in hand
    #####:  993:	  discardCard(choice2, currentPlayer, state, 1);
call    0 never executed
    #####:  994:	  discardCard(choice3, currentPlayer, state, 1);
call    0 never executed
        -:  995:	}
        -:  996:			
        -:  997:      //discard card from hand
    #####:  998:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####:  999:      return 0;
        -: 1000:			
        -: 1001:    case tribute:
    #####: 1002:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
branch  0 never executed
branch  1 never executed
    #####: 1003:	if (state->deckCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1004:	  tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1005:	  state->deckCount[nextPlayer]--;
        -: 1006:	}
    #####: 1007:	else if (state->discardCount[nextPlayer] > 0){
branch  0 never executed
branch  1 never executed
    #####: 1008:	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####: 1009:	  state->discardCount[nextPlayer]--;
        -: 1010:	}
        -: 1011:	else{
        -: 1012:	  //No Card to Reveal
        -: 1013:	  if (DEBUG){
        -: 1014:	    printf("No cards to reveal\n");
        -: 1015:	  }
        -: 1016:	}
        -: 1017:      }
        -: 1018:	    
        -: 1019:      else{
    #####: 1020:	if (state->deckCount[nextPlayer] == 0){
branch  0 never executed
branch  1 never executed
    #####: 1021:	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
branch  0 never executed
branch  1 never executed
    #####: 1022:	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####: 1023:	    state->deckCount[nextPlayer]++;
    #####: 1024:	    state->discard[nextPlayer][i] = -1;
    #####: 1025:	    state->discardCount[nextPlayer]--;
        -: 1026:	  }
        -: 1027:			    
    #####: 1028:	  shuffle(nextPlayer,state);//Shuffle the deck
call    0 never executed
        -: 1029:	} 
    #####: 1030:	tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1031:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1032:	state->deckCount[nextPlayer]--;
    #####: 1033:	tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####: 1034:	state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####: 1035:	state->deckCount[nextPlayer]--;
        -: 1036:      }    
        -: 1037:		       
    #####: 1038:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one 
branch  0 never executed
branch  1 never executed
    #####: 1039:	state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####: 1040:	state->playedCardCount++;
    #####: 1041:	tributeRevealedCards[1] = -1;
        -: 1042:      }
        -: 1043:
    #####: 1044:      for (i = 0; i <= 2; i ++){
branch  0 never executed
branch  1 never executed
    #####: 1045:	if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
    #####: 1046:	  state->coins += 2;
        -: 1047:	}
        -: 1048:		    
    #####: 1049:	else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall){//Victory Card Found
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
    #####: 1050:	  drawCard(currentPlayer, state);
call    0 never executed
    #####: 1051:	  drawCard(currentPlayer, state);
call    0 never executed
        -: 1052:	}
        -: 1053:	else{//Action Card
    #####: 1054:	  state->numActions = state->numActions + 2;
        -: 1055:	}
        -: 1056:      }
        -: 1057:	    
    #####: 1058:      return 0;
        -: 1059:		
        -: 1060:    case ambassador:
    #####: 1061:      j = 0;		//used to check if player has enough cards to discard
        -: 1062:
    #####: 1063:      if (choice2 > 2 || choice2 < 0)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1064:	{
    #####: 1065:	  return -1;				
        -: 1066:	}
        -: 1067:
    #####: 1068:      if (choice1 == handPos)
branch  0 never executed
branch  1 never executed
        -: 1069:	{
    #####: 1070:	  return -1;
        -: 1071:	}
        -: 1072:
    #####: 1073:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1074:	{
    #####: 1075:	  if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
        -: 1076:	    {
    #####: 1077:	      j++;
        -: 1078:	    }
        -: 1079:	}
    #####: 1080:      if (j < choice2)
branch  0 never executed
branch  1 never executed
        -: 1081:	{
    #####: 1082:	  return -1;				
        -: 1083:	}
        -: 1084:
        -: 1085:      if (DEBUG) 
        -: 1086:	printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -: 1087:
        -: 1088:      //increase supply count for choosen card by amount being discarded
    #####: 1089:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -: 1090:			
        -: 1091:      //each other player gains a copy of revealed card
    #####: 1092:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1093:	{
    #####: 1094:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1095:	    {
    #####: 1096:	      gainCard(state->hand[currentPlayer][choice1], state, 0, i);
call    0 never executed
        -: 1097:	    }
        -: 1098:	}
        -: 1099:
        -: 1100:      //discard played card from hand
    #####: 1101:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1102:
        -: 1103:      //trash copies of cards returned to supply
    #####: 1104:      for (j = 0; j < choice2; j++)
branch  0 never executed
branch  1 never executed
        -: 1105:	{
    #####: 1106:	  for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1107:	    {
    #####: 1108:	      if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1])
branch  0 never executed
branch  1 never executed
        -: 1109:		{
    #####: 1110:		  discardCard(i, currentPlayer, state, 1);
call    0 never executed
    #####: 1111:		  break;
        -: 1112:		}
        -: 1113:	    }
        -: 1114:	}			
        -: 1115:
    #####: 1116:      return 0;
        -: 1117:		
        -: 1118:    case cutpurse:
        -: 1119:
    #####: 1120:      updateCoins(currentPlayer, state, 2);
call    0 never executed
    #####: 1121:      for (i = 0; i < state->numPlayers; i++)
branch  0 never executed
branch  1 never executed
        -: 1122:	{
    #####: 1123:	  if (i != currentPlayer)
branch  0 never executed
branch  1 never executed
        -: 1124:	    {
    #####: 1125:	      for (j = 0; j < state->handCount[i]; j++)
branch  0 never executed
branch  1 never executed
        -: 1126:		{
    #####: 1127:		  if (state->hand[i][j] == copper)
branch  0 never executed
branch  1 never executed
        -: 1128:		    {
    #####: 1129:		      discardCard(j, i, state, 0);
call    0 never executed
    #####: 1130:		      break;
        -: 1131:		    }
    #####: 1132:		  if (j == state->handCount[i])
branch  0 never executed
branch  1 never executed
        -: 1133:		    {
    #####: 1134:		      for (k = 0; k < state->handCount[i]; k++)
branch  0 never executed
branch  1 never executed
        -: 1135:			{
        -: 1136:			  if (DEBUG)
        -: 1137:			    printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1138:			}	
    #####: 1139:		      break;
        -: 1140:		    }		
        -: 1141:		}
        -: 1142:					
        -: 1143:	    }
        -: 1144:				
        -: 1145:	}				
        -: 1146:
        -: 1147:      //discard played card from hand
    #####: 1148:      discardCard(handPos, currentPlayer, state, 0);			
call    0 never executed
        -: 1149:
    #####: 1150:      return 0;
        -: 1151:
        -: 1152:		
        -: 1153:    case embargo: 
        -: 1154:      //+2 Coins
    #####: 1155:      state->coins = state->coins + 2;
        -: 1156:			
        -: 1157:      //see if selected pile is in play
    #####: 1158:      if ( state->supplyCount[choice1] == -1 )
branch  0 never executed
branch  1 never executed
        -: 1159:	{
    #####: 1160:	  return -1;
        -: 1161:	}
        -: 1162:			
        -: 1163:      //add embargo token to selected supply pile
    #####: 1164:      state->embargoTokens[choice1]++;
        -: 1165:			
        -: 1166:      //trash card
    #####: 1167:      discardCard(handPos, currentPlayer, state, 1);		
call    0 never executed
    #####: 1168:      return 0;
        -: 1169:		
        -: 1170:    case outpost:
        -: 1171:      //set outpost flag
    #####: 1172:      state->outpostPlayed++;
        -: 1173:			
        -: 1174:      //discard card
    #####: 1175:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1176:      return 0;
        -: 1177:		
        -: 1178:    case salvager:
        -: 1179:      //+1 buy
    #####: 1180:      state->numBuys++;
        -: 1181:			
    #####: 1182:      if (choice1)
branch  0 never executed
branch  1 never executed
        -: 1183:	{
        -: 1184:	  //gain coins equal to trashed card
    #####: 1185:	  state->coins = state->coins + getCost( handCard(choice1, state) );
call    0 never executed
call    1 never executed
        -: 1186:	  //trash card
    #####: 1187:	  discardCard(choice1, currentPlayer, state, 1);	
call    0 never executed
        -: 1188:	}
        -: 1189:			
        -: 1190:      //discard card
    #####: 1191:      discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1192:      return 0;
        -: 1193:		
        -: 1194:    case sea_hag:
    #####: 1195:      for (i = 0; i < state->numPlayers; i++){
branch  0 never executed
branch  1 never executed
    #####: 1196:	if (i != currentPlayer){
branch  0 never executed
branch  1 never executed
    #####: 1197:	  state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];			    state->deckCount[i]--;
    #####: 1198:	  state->discardCount[i]++;
    #####: 1199:	  state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
        -: 1200:	}
        -: 1201:      }
    #####: 1202:      return 0;
        -: 1203:		
        -: 1204:    case treasure_map:
        -: 1205:      //search hand for another treasure_map
    #####: 1206:      index = -1;
    #####: 1207:      for (i = 0; i < state->handCount[currentPlayer]; i++)
branch  0 never executed
branch  1 never executed
        -: 1208:	{
    #####: 1209:	  if (state->hand[currentPlayer][i] == treasure_map && i != handPos)
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
        -: 1210:	    {
    #####: 1211:	      index = i;
    #####: 1212:	      break;
        -: 1213:	    }
        -: 1214:	}
    #####: 1215:      if (index > -1)
branch  0 never executed
branch  1 never executed
        -: 1216:	{
        -: 1217:	  //trash both treasure cards
    #####: 1218:	  discardCard(handPos, currentPlayer, state, 1);
call    0 never executed
    #####: 1219:	  discardCard(index, currentPlayer, state, 1);
call    0 never executed
        -: 1220:
        -: 1221:	  //gain 4 Gold cards
    #####: 1222:	  for (i = 0; i < 4; i++)
branch  0 never executed
branch  1 never executed
        -: 1223:	    {
    #####: 1224:	      gainCard(gold, state, 1, currentPlayer);
call    0 never executed
        -: 1225:	    }
        -: 1226:				
        -: 1227:	  //return success
    #####: 1228:	  return 1;
        -: 1229:	}
        -: 1230:			
        -: 1231:      //no second treasure_map found in hand
    #####: 1232:      return -1;
        -: 1233:    }
        -: 1234:	
    #####: 1235:  return -1;
        -: 1236:}
        -: 1237:
function discardCard called 10000 returned 100% blocks executed 78%
    10000: 1238:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag)
        -: 1239:{
        -: 1240:	
        -: 1241:  //if card is not trashed, added to Played pile 
    10000: 1242:  if (trashFlag < 1)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -: 1243:    {
        -: 1244:      //add card to played pile
    10000: 1245:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos]; 
    10000: 1246:      state->playedCardCount++;
        -: 1247:    }
        -: 1248:	
        -: 1249:  //set played card to -1
    10000: 1250:  state->hand[currentPlayer][handPos] = -1;
        -: 1251:	
        -: 1252:  //remove card from player's hand
    10000: 1253:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1254:    {
        -: 1255:      //reduce number of cards in hand
    #####: 1256:      state->handCount[currentPlayer]--;
        -: 1257:    }
    10000: 1258:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1259:    {
        -: 1260:      //reduce number of cards in hand
    #####: 1261:      state->handCount[currentPlayer]--;
        -: 1262:    }
        -: 1263:  else 	
        -: 1264:    {
        -: 1265:      //replace discarded card with last card in hand
    10000: 1266:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1267:      //set last card to -1
    10000: 1268:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1269:      //reduce number of cards in hand
    10000: 1270:      state->handCount[currentPlayer]--;
        -: 1271:    }
        -: 1272:	
    10000: 1273:  return 0;
        -: 1274:}
        -: 1275:
function gainCard called 0 returned 0% blocks executed 0%
    #####: 1276:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player)
        -: 1277:{
        -: 1278:  //Note: supplyPos is enum of choosen card
        -: 1279:	
        -: 1280:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1281:  if ( supplyCount(supplyPos, state) < 1 )
call    0 never executed
branch  1 never executed
branch  2 never executed
        -: 1282:    {
    #####: 1283:      return -1;
        -: 1284:    }
        -: 1285:	
        -: 1286:  //added card for [whoseTurn] current player:
        -: 1287:  // toFlag = 0 : add to discard
        -: 1288:  // toFlag = 1 : add to deck
        -: 1289:  // toFlag = 2 : add to hand
        -: 1290:
    #####: 1291:  if (toFlag == 1)
branch  0 never executed
branch  1 never executed
        -: 1292:    {
    #####: 1293:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1294:      state->deckCount[player]++;
        -: 1295:    }
    #####: 1296:  else if (toFlag == 2)
branch  0 never executed
branch  1 never executed
        -: 1297:    {
    #####: 1298:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1299:      state->handCount[player]++;
        -: 1300:    }
        -: 1301:  else
        -: 1302:    {
    #####: 1303:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1304:      state->discardCount[player]++;
        -: 1305:    }
        -: 1306:	
        -: 1307:  //decrease number in supply pile
    #####: 1308:  state->supplyCount[supplyPos]--;
        -: 1309:	 
    #####: 1310:  return 0;
        -: 1311:}
        -: 1312:
function updateCoins called 316 returned 100% blocks executed 82%
      316: 1313:int updateCoins(int player, struct gameState *state, int bonus)
        -: 1314:{
        -: 1315:  int i;
        -: 1316:	
        -: 1317:  //reset coin count
      316: 1318:  state->coins = 0;
        -: 1319:
        -: 1320:  //add coins for each Treasure card in player's hand
     1896: 1321:  for (i = 0; i < state->handCount[player]; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -: 1322:    {
     1580: 1323:      if (state->hand[player][i] == copper)
branch  0 taken 78% (fallthrough)
branch  1 taken 22%
        -: 1324:	{
     1231: 1325:	  state->coins += 1;
        -: 1326:	}
      349: 1327:      else if (state->hand[player][i] == silver)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1328:	{
    #####: 1329:	  state->coins += 2;
        -: 1330:	}
      349: 1331:      else if (state->hand[player][i] == gold)
branch  0 taken 0% (fallthrough)
branch  1 taken 100%
        -: 1332:	{
    #####: 1333:	  state->coins += 3;
        -: 1334:	}	
        -: 1335:    }	
        -: 1336:
        -: 1337:  //add bonus
      316: 1338:  state->coins += bonus;
        -: 1339:
      316: 1340:  return 0;
        -: 1341:}
        -: 1342:
function playSmithy called 5015 returned 100% blocks executed 100%
     5015: 1343:int playSmithy(struct gameState *state, int handPos){
     5015: 1344:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1345:	int i;
        -: 1346:	//int size = 5;
     5015: 1347:	int size = 3;
        -: 1348:
        -: 1349:	//+3 Cards
    20060: 1350:	for (i = 0; i < size; i++){
branch  0 taken 75%
branch  1 taken 25% (fallthrough)
    15045: 1351:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1352:	}
        -: 1353:	//discard card from hand
     5015: 1354:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     5015: 1355:	return 0;
        -: 1356:
        -: 1357:}
        -: 1358:
function playVillage called 4947 returned 100% blocks executed 100%
     4947: 1359:int playVillage(struct gameState *state,int handPos){
     4947: 1360:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1361:	
        -: 1362:	//+1 Card
     4947: 1363:	drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1364:	//+3 Actions
        -: 1365:	//state->numActions = state->numActions + 3;
     4947: 1366:	state->numActions = state->numActions + 2;
        -: 1367:	//discard played card from hand
     4947: 1368:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
     4947: 1369:	return 0;
        -: 1370:}
        -: 1371:
function playgreat_hall called 0 returned 0% blocks executed 0%
    #####: 1372:int playgreat_hall(struct gameState *state, int handPos){
        -: 1373:
    #####: 1374:	int currentPlayer = whoseTurn(state);
call    0 never executed
    #####: 1375:	drawCard(currentPlayer,state);
call    0 never executed
    #####: 1376:	state -> numActions = state -> numActions + 2;
    #####: 1377:	discardCard(handPos, currentPlayer, state, 0);
call    0 never executed
    #####: 1378:	return 0;
        -: 1379:}
        -: 1380:
function playAdventurer called 4998 returned 100% blocks executed 100%
     4998: 1381:int playAdventurer(struct gameState *state){
        -: 1382:	
     4998: 1383:	int z = 0;
     4998: 1384:	int drawntreasure = 0;
        -: 1385:	int cardDrawn;
        -: 1386:	int temphand[MAX_HAND];
     4998: 1387:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
        -: 1388:	
  1876222: 1389:	while(drawntreasure<2){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1866226: 1390:		if (state->deckCount[currentPlayer] <1){//if the deck is empty we need to shuffle discard and add to deck
branch  0 taken 73% (fallthrough)
branch  1 taken 27%
  1364046: 1391:		  shuffle(currentPlayer, state);
call    0 returned 100%
        -: 1392:		}
  1866226: 1393:		drawCard(currentPlayer, state);
call    0 returned 100%
  1866226: 1394:		cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];//top card of hand is most recently drawn card.
  1866226: 1395:		if (cardDrawn == copper || cardDrawn == silver)
branch  0 taken 99% (fallthrough)
branch  1 taken 1%
branch  2 taken 0% (fallthrough)
branch  3 taken 100%
     9962: 1396:		  drawntreasure++;
        -: 1397:		else{
  1856264: 1398:		  temphand[z]=cardDrawn;
  1856264: 1399:		  state->handCount[currentPlayer]--; //this should just remove the top card (the most recently drawn one).
  1856264: 1400:		  z++;
        -: 1401:		}
        -: 1402:		  }
  1062466: 1403:		while(z-1>=0){
branch  0 taken 99%
branch  1 taken 1% (fallthrough)
  1052470: 1404:		state->discard[currentPlayer][state->discardCount[currentPlayer]++]=temphand[z-1]; // discard all cards in play that have been drawn
  1052470: 1405:		z=z-1;
        -: 1406:        }
     4998: 1407:      return 0;
        -: 1408:
        -: 1409:}
function playcouncil_room called 38 returned 100% blocks executed 100%
       38: 1410:int playcouncil_room(struct gameState *state, int handPos){
        -: 1411:	//+4 Cards
        -: 1412:	int i;
       38: 1413:	int currentPlayer = whoseTurn(state);
call    0 returned 100%
      228: 1414:	for (i = 0; i < 5; i++){
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
      190: 1415:		drawCard(currentPlayer, state);
call    0 returned 100%
        -: 1416:	}
        -: 1417:
        -: 1418:	//+1 Buy
       38: 1419:	state->numBuys++;
        -: 1420:
        -: 1421:	//Each other player draws a card
      114: 1422:	for (i = 0; i < state->numPlayers; i++){
branch  0 taken 67%
branch  1 taken 33% (fallthrough)
       76: 1423:		if ( i != currentPlayer ){
branch  0 taken 50% (fallthrough)
branch  1 taken 50%
       38: 1424:			drawCard(i, state);
call    0 returned 100%
       38: 1425:			drawCard(i,state);
call    0 returned 100%
        -: 1426:		}
        -: 1427:	}
        -: 1428:
        -: 1429:	//put played card in played card pile
       38: 1430:	discardCard(handPos, currentPlayer, state, 0);
call    0 returned 100%
       38: 1431:	return 0;
        -: 1432:}
        -: 1433://end of dominion.c
        -: 1434:
