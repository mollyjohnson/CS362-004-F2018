        -:    0:Source:testme.c
        -:    0:Graph:testme.gcno
        -:    0:Data:testme.gcda
        -:    0:Runs:1
        -:    0:Programs:1
        -:    1://Molly Johnson, CS 362, Random Quiz
        -:    2:
        -:    3:#include<stdio.h>
        -:    4:#include<string.h>
        -:    5:#include<stdlib.h>
        -:    6:#include<time.h>
        -:    7:
function inputChar called 2455326 returned 100% blocks executed 100%
  2455326:    8:char inputChar()
        -:    9:{
        -:   10:    // TODO: rewrite this function
        -:   11:
        -:   12:	//rand num generator formula adapted from:
        -:   13:	//https:stackoverflow.com/questions/822323/how-to-generate-a-random-int-in-c
  2455326:   14:	int minValue = 0;
  2455326:   15:	int maxValue = 13;
  2455326:   16:	int randIndex = (rand() % maxValue + minValue);
call    0 returned 100%
  2455326:   17:	char charOptions[] = "[({ ax})]rest";
        -:   18:
  2455326:   19:    return charOptions[randIndex];
        -:   20:}
        -:   21:
function inputString called 409221 returned 100% blocks executed 100%
   409221:   22:char *inputString()
        -:   23:{
        -:   24:    // TODO: rewrite this function
        -:   25:
        -:   26:	static char randString[6];
        -:   27:
  2455326:   28:	for (int i = 0; i < 5; i++)
branch  0 taken 83%
branch  1 taken 17% (fallthrough)
        -:   29:	{
  2046105:   30:		randString[i] = inputChar();
call    0 returned 100%
        -:   31:	}
        -:   32:
   409221:   33:    return randString;
        -:   34:}
        -:   35:
function testme called 1 returned 0% blocks executed 100%
        1:   36:void testme()
        -:   37:{
        1:   38:  int tcCount = 0;
        -:   39:  char *s;
        -:   40:  char c;
        1:   41:  int state = 0;
        -:   42:  while (1)
        -:   43:  {
   409221:   44:    tcCount++;
   409221:   45:    c = inputChar();
call    0 returned 100%
   409221:   46:    s = inputString();
call    0 returned 100%
   409221:   47:    printf("Iteration %d: c = %c, s = %s, state = %d\n", tcCount, c, s, state);
call    0 returned 100%
        -:   48:
   409221:   49:    if (c == '[' && state == 0) state = 1;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   50:    if (c == '(' && state == 1) state = 2;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   51:    if (c == '{' && state == 2) state = 3;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   52:    if (c == ' '&& state == 3) state = 4;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   53:    if (c == 'a' && state == 4) state = 5;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   54:    if (c == 'x' && state == 5) state = 6;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   55:    if (c == '}' && state == 6) state = 7;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   56:    if (c == ')' && state == 7) state = 8;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   57:    if (c == ']' && state == 8) state = 9;
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 1% (fallthrough)
branch  3 taken 99%
   409221:   58:    if (s[0] == 'r' && s[1] == 'e'
branch  0 taken 8% (fallthrough)
branch  1 taken 92%
branch  2 taken 8% (fallthrough)
branch  3 taken 92%
     2378:   59:       && s[2] == 's' && s[3] == 'e'
branch  0 taken 9% (fallthrough)
branch  1 taken 91%
branch  2 taken 7% (fallthrough)
branch  3 taken 93%
       15:   60:       && s[4] == 't' && s[5] == '\0'
branch  0 taken 7% (fallthrough)
branch  1 taken 93%
branch  2 taken 100% (fallthrough)
branch  3 taken 0%
        1:   61:       && state == 9)
branch  0 taken 100% (fallthrough)
branch  1 taken 0%
        -:   62:    {
        1:   63:      printf("error ");
call    0 returned 100%
        1:   64:      exit(200);
call    0 returned 0%
        -:   65:    }
   409220:   66:  }
        -:   67:}
        -:   68:
function main called 1 returned 0% blocks executed 80%
        1:   69:int main(int argc, char *argv[])
        -:   70:{
        1:   71:    srand(time(NULL));
call    0 returned 100%
call    1 returned 100%
        1:   72:    testme();
call    0 returned 0%
        -:   73:
    #####:   74:    return 0;
        -:   75:}
